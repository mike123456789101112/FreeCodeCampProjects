def create_sudoku(gaps)
  board = [[0 for _ in range(9)] for _ in range(9)]
  board = solve_sudoku(board)
  n = gaps
  while n > 0:
    row = random.randint(0, 8)
    col = random.randint(0. 8)
    if board[row][col] != 0:
      board[row][col] = 0
    n -= 1
  return board

def find_empty(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return (i, j)
    return None

def check_number(board, row, col, num):
    for i in range(9):
        if board[row][i] == num or board[i][col] == num:
            return False
    start_row = (row // 3) * 3
    start_column = (col // 3) * 3
    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_col + j] == num:
                return False
    return True

def solve_sudoku(board):
    empty = find_empty(board)
    if not empty:
        return True    #sudoku solved
    
    row, col = empty_pos
    for n in range(1, 10):
        if check_number(board, row, col, num):
            board[row][col] = num
            if solve_sudoku(board):
                return True
            board[row][col] = 0          

        # if no number can be found to fill gap, then it is set to zero and the for loop continues iterating. 
        # if for loop can not find number, then solve sudoku returns false and the previous cell is set to zero and process repeats...
    
    return False
